#!/bin/bash


function help(){
	

	echo " script usage:"
	echo " ./xtf [FILTER] [COMMAND] [USER_NAME] [LOG]"$'\n'"----------------------------------------"
	echo " [FILTER] -->    after certain date '-a  <YYYY-MM-DD HH:MM:SS>'"
	echo "          -->   before certain date '-b' <YYYY-MM-DD HH:MM:SS>'"
	echo "          -->  only lines with currency '-c <code of currency>'"

	echo "----------------------------------------"
	echo " [COMMAND] -> 'list'/<blank> displays all logs of a trader "
	echo "           -> 'list-currency' displays currencies that were traded by a trader"
	echo "           -> 'status' displays status of currencies after all transaction "
	echo "           -> 'profit' displays status of currencies after certain profit"
	echo "----------------------------------------"
	
	exit 0
 
}

function list(){
		
	echo "$2" | grep "$1"

}





function listcurrency(){
	
	all_curr=()
	while IFS= read -r line; do
		curr=$(echo "$line" | awk -F';' '{ print $3 }')
		all_curr+=("$curr")
	done < <(list "$1" "$2")
	
	printf "%s\n" "${all_curr[@]}" | sort -u 
}

function profit(){
	
	if ! [[ -v XTF_PROFIT ]]; then
		XTF_PROFIT=20
	fi

	mapfile -t stats < <(status "$1" "$2")

	for p in "${stats[@]}"; do
		num=$(echo "$p" | cut -d' ' -f3)
		curr=$(echo "$p" | cut -d' ' -f1)
		
		
		pr=$(echo "scale=2; $XTF_PROFIT / 100" | bc)

		if (( $(echo "$num > 0" | bc -l) )); then
			num=$(awk -v num="$num" -v pr="$pr" 'BEGIN { result = num + num * pr; printf "%.4f", result }')
			echo "$curr : $num"
		else 
			echo "$curr : $num"	
		fi
	done
}


function status(){

	all_curr=()
	all_stats=()

	while IFS= read -r line; do

		curr=$(echo "$line" | cut -d';' -f3)
		stat=$(echo "$line" | cut -d';' -f3,4)
		
		all_curr+=("$curr")
		all_stats+=("$stat")
	done < <(echo "$2" | grep "$1")


	all_stats=($(for element in "${all_stats[@]}"; do echo "$element"; done | sort))
	all_curr=($(for element in "${all_curr[@]}"; do echo "$element"; done | sort))	

	results=()
	i=0
	j=0

	for c1 in "${all_curr[@]}"; do
		num1=$(echo "${all_stats[i]}" | cut -d';' -f2)
		
		j=0
		for c2 in "${all_curr[@]}"; do
			num2=$(echo "${all_stats[j]}" | cut -d';' -f2)
			

			if [ "$i" != "$j" ] && [ "$c1" == "$c2" ]; then
				num1=$(awk -v num1="$num1"  -v num2="$num2" 'BEGIN { sum = num1 + num2; printf "%.4f\n", sum }')
			fi
			
			((j++))
		done
		
		if [ "$i" == "$(echo "${#all_stats[@]}-1" | bc)" ]; then
			results+="$c1 : $num1"
		else
			results+="$c1 : "$num1""$'\n'
		fi		
			
		((i++))
	
	done

	echo "${results[@]}" | uniq


}


function after(){

	
	date=$(date -d "$1" +%s)
	while IFS= read -r line; do
			
		d=$(echo "$line" | awk -F';' '{ print $2 }')
		cmp_date=$(date -d "$d" +%s)
		

		if [[ "$cmp_date" -gt "$date" ]]; then
			echo "$line"
		fi				
	done < <(list "$2" "$3")
}

function before(){

	date=$(date -d "$1" +%s)
	while IFS= read -r line; do
				
		d=$(echo "$line" | awk -F';' '{ print $2 }')
		cmp_date=$(date -d "$d" +%s)
		

		if [[ "$cmp_date" -lt "$date" ]]; then
			echo "$line"
		fi				
	done < <(list "$2" "$3")

}
	

function currency(){

	while IFS= read -r line; do
				
		curr=$(echo "$line" | awk -F';' '{ print $3 }')

		if [[ "$curr" == "$1" ]]; then
			echo "$line"
		fi				
	done < <(list "$2" "$3")

}

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	if [ $# == 1 ]; then 
		help
	else 
		echo "Unknown command"
	fi
fi


is_file=0
is_name=0
is_filter=0
is_cmd=0
is_curr=0

for arg in "$@"; do
		
	if [ "$arg" == "status" ] || [ "$arg" == "profit" ] || [ "$arg" == "list" ]; then
		cmd="$arg"
		((is_cmd++))
	elif [ "$arg" == "list-currency" ]; then
		cmd="listcurrency"
		((is_cmd++))
	
	elif [[ "$arg" == *.gz ]] && [[ "$is_file" == 0 ]]; then	
		file+=$(zcat "$arg")
		is_file=1
	elif [[ "$arg" == *.gz ]] && [[ "$is_file" == 1 ]]; then
		file+=$'\n'$(zcat "$arg")

	elif [[ "$arg" == *.log ]] && [[ "$is_file" == 0 ]]; then
		file+=$(cat "$arg")
		is_file=1	
	elif [[ "$arg" == *.log ]] && [[ "$is_file" == 1 ]]; then
		file+=$'\n'$(cat "$arg")

	elif [[ "$arg" =~ ^[[:alnum:]_]{4,}$ ]]; then
		((is_name++))
		name="$arg"
	fi
done

index=0
for arg in "$@"; do

	if [[ "$arg" =~ ^-a|-b$ ]]; then
		is_filter=1
		filter="$arg"
		i="$index"

	elif [[ "$arg" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]][0-9]{2}:[0-9]{2}:[0-9]{2}$ ]] && [[ "$i" == "$((index - 1))" ]]; then
		is_date=1
		date="$arg"

	elif [[ "$arg" == "-c" ]]; then
		is_filter=1
		filter="$arg"
		i="$index"
	elif [[ "$arg" =~ ^[A-Z]{2,}$ ]] && [[ "$i" == "$((index - 1))" ]]; then
		is_curr=1
		curr="$arg"
	
	fi	
	((index++))
done


if [[ "$is_file" == 0 ]] || [[ "$is_name" != 1 ]] || [[ "$is_cmd" -gt 1 ]]; then
	echo "ERROR: invalid number of key arguments" >&2
	exit 1
fi


if [[ "$is_cmd" == 1 ]]; then

	if [[ "$is_filter" == 1 ]]; then
		
		if [ "$filter" == "-a" ]; then
			file_a=$(after "$date" "$name" "$file")
			"$cmd" "$name" "$file_a"		
		elif [ "$filter" == "-b" ]; then
			file_b=$(before "$date" "$name" "$file")
			"$cmd" "$name" "$file_b"
		elif [ "$filter" == "-c" ]; then
		      	file_c=$(currency "$curr" "$name" "$file")
			"$cmd" "$name" "$file_c"
		fi	
	else 
		"$cmd" "$name" "$file"	
	fi

elif [[ "$is_cmd" == 0 ]]; then

	if [[ "$is_filter" == 1 ]]; then
		
	        if [ "$filter" == "-a" ]; then
	       	        file_a=$(after "$date" "$name" "$file")
	       	        echo "$file_a"
		elif [ "$filter" == "-b" ]; then
		 	 file_b=$(before "$date" "$name" "$file")
		 	 echo "$file_b"
		elif [ "$filter" == "-c" ]; then
		 	 file_c=$(currency "$curr" "$name" "$file")
		 	 echo "$file_c"
		fi
	
	else
		list "$name" "$file"
	fi
fi	



